::::::::::::::
Makefile
::::::::::::::
# Makefile du Projet: sonde
#
CC   = gcc -g -std=gnu11

BIN  = ADI2D
LIBS =  -L/usr/X11R6/lib -lX11 -lXext -lm
INCS =  -I. -I/usr/X11R6/include 

SOURCES := $(wildcard *.c)
OBJECTS := $(patsubst %.c,%.o,$(SOURCES))
DEPENDS := $(patsubst %.c,%.d,$(SOURCES))

# ADD MORE WARNINGS!
WARNING := -Wall -Wextra

# .PHONY means these rules get executed even if
# files of those names exist.
.PHONY: all clean

# The first rule is the default, ie. "make",
# "make all" and "make parking" mean the same
all:  $(BIN)

clean:
	rm -f $(OBJECTS) $(DEPENDS) $(BIN)

# Linking the executable from the object files
$(BIN): $(OBJECTS)
	$(CC) $(INCS) $(WARNING) $(CFLAGS) $^ -o $@ $(LIBS)

-include $(DEPENDS)

%.o: %.c Makefile
	$(CC) $(INCS) $(WARNING) $(CFLAGS) -MMD -MP -c $< -o $@
::::::::::::::
main.h
::::::::::::::
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

typedef struct{
    int nl;
    double *l;
    double *d;
    double *u;
} Tridiag;

typedef struct{
    int nx, ny;
    double *val;

} Vec;


/* Variables globales definies dans le main */
extern int Nx;
extern int Ny;

/* numerotation unique sur la grille Nx x Ny 
Entree : i, j, Nx
Sortie : i+j*Nx
*/
int idx(int i, int j);

/* Construction d'une matrice sous la forme d'un vecteur de taille nx*ny
Entree : double val valeur de remplissage, 
         int nx, ny taille
Sortie : *Vec 
*/
Vec* buildVec(double val, int nx, int ny);

/* Affichage du vecteur 
Entree : Vec *V
Sortie : vide
*/
void printVec(Vec* V);

/* Destruction d'un vecteur
Entree : Vec* V
Sortie : vide
*/
void destroyVec(Vec* V);
   
/* Construction de la matrice tridiagonale M de rang nl
Entree : double omega, int nl
Sortie : Tridiag* pt
*/
Tridiag* buildM(double omega, int nl);

/* Destruction d'une matrice tridiagonale M
Entree : Tridiag *ptM
Sortie : vide
*/

void destroyM(Tridiag *ptM);

/* Affichage de la matrice Tridiag
Entree : Tridiag *T
Sortie : vide
*/
void printTridiag(Tridiag* T);

/* Construction de la decomposition LU à la place de la matrice
Entree : Tridiag *T
Sortie : vide
*/ 
void invM(Tridiag *ptM);

/* Resolution du systeme d'equations lineaires T X = RHS
Entree : Tridiag *ptM, Vec *ptRHS
Sortie : Vec *ptX
*/
void solve(Tridiag *ptM, Vec *ptRHS, Vec *ptX);

/* Produit Matrice tridiagonale par un vecteur
Entree : Tridiag T, Vec X
Sortie : Vec *ptY
*/
void dot(Tridiag *ptM, Vec *ptX, Vec *ptY);

/* residu = norminf(b-M*x)
Entree : Tridiag *ptM, Vec*ptRHS, Vec *ptX
Sortie : res
*/
double residu(Tridiag *ptM, Vec*ptRHS, Vec *ptX);


::::::::::::::
buildM.c
::::::::::::::
#include "main.h"

/* Construction de la matrice tridiagonale M de rang nl
Entree : double omega, int nl
Sortie : Tridiag* pt
*/
Tridiag* buildM(double omega, int nl){
    // Allocation d'une structure Tridiag
    Tridiag* pt=( Tridiag*) malloc(sizeof(Tridiag));
    
    // Affectation du nombre de lignes
    pt->nl = nl;
    
    if (pt==NULL) {
       printf("Allocation Error\n");
       exit(1);
       }
    // Allocation du tableau l 
    pt->l=(double*) malloc(nl*sizeof(double));
    if (pt==NULL) {
       printf("Allocation Error\n");
       exit(1);
       }  
    // Allocation du tableau d
    pt->d=(double*) malloc(nl*sizeof(double));
    if (pt==NULL) {
       printf("Allocation Error\n");
       exit(1);
       }  
    // Allocation du tableau u
    pt->u=(double*) malloc(nl*sizeof(double));
    if (pt==NULL) {
       printf("Allocation Error\n");
       exit(1);
       } 
       
    // Remplissage de la matrice M
    double m    = (double) nl -1.;
    double m_sq = m*m;
    
    pt->d[0]=1.0;
    pt->u[0]=0.0;
    for (int k=1; k<nl-1; k++){
        pt->l[k]= -m_sq;
        pt->d[k]=2*m_sq+omega;
        pt->u[k]= -m_sq;
        } 
    pt->l[nl-1]=0.0;
    pt->d[nl-1]=1.0;
    // annulation des composantes non pertinentes    
    pt->l[0]   =0.0;
    pt->u[nl-1]=0.0;
    return pt;
    }
 
::::::::::::::
buildVec.c
::::::::::::::
#include "main.h"

/* Construction d'une matrice sous la forme d'un vecteur de taille nx*ny
Entree : double val valeur de remplissage, 
         int nx, ny taille
Sortie : *Vec 
*/
Vec* buildVec(double val, int nx, int ny){
    // Allocation du vecteur pt
    Vec* pt = (Vec*) malloc(sizeof(Vec));
    if (pt==NULL) {
    printf("Allocation Error\n");
    exit(1);
    }
    // Affectation des dimensions  
    pt->nx=nx;
    pt->ny=ny;      
 
    pt->val=(double*) malloc(nx*ny*sizeof(double));
    if (pt->val==NULL) {
       printf("Allocation Error\n");
       exit(1);
       }
    for (int i=0; i<nx; i++)
        for (int j=0; j<ny; j++)
            pt->val[i+j*nx]=val;  
    return pt;
    }
::::::::::::::
destroyM.c
::::::::::::::
#include "main.h"

/* Destruction d'une matrice tridiagonale M
Entree : Tridiag *ptM
Sortie : vide
*/

void destroyM(Tridiag *ptM){
    free(ptM->l);
    free(ptM->d);
    free(ptM->u);
    free(ptM);
    }
::::::::::::::
destroyVec.c
::::::::::::::
#include "main.h"

/* Destruction d'un vecteur
Entree : Vec* V
Sortie : vide
*/
void destroyVec(Vec* V){
   free(V->val);
   free(V);
   }
::::::::::::::
dot.c
::::::::::::::
#include "main.h"

/* Produit Matrice tridiagonale par un vecteur
Entree : Tridiag T, Vec X
Sortie : Vec *ptY
*/
void dot(Tridiag *ptM, Vec *ptX, Vec *ptY){
    int nl = ptM->nl;
    
    /* Verification des dimensions */
    if (nl != ptX->nx*ptX->ny){
      printf("Error : M and X inconsistent dimensions\n");
      exit(1);
      }      
    if (nl != ptY->nx*ptY->ny){
      printf("Error : M and X inconsistent dimensions\n");
      exit(1);
      } 
      
   /* effacage des composantes de Y */
   for (int k=0; k<nl; k++){
       ptY->val[k]=0.0;
       }            

   /* Y[0] = d[0]*X[0]+u[0]*X[1] */
   ptY->val[0]=ptM->d[0]*ptX->val[0]+ptM->u[0]*ptX->val[1];
   for (int k=0; k<nl-1; k++){ 
       /* Y[k] = l[k]*X[k-1]+d[k]*X[k]+u[k]*X[k+1] */
       ptY->val[k]=ptM->l[k]*ptX->val[k-1]+ptM->d[k]*ptX->val[k]+ptM->u[k]*ptX->val[k+1];
       }
   /* Y[nl-1] = l[nl-1]*X[nl-2]+d[nl-1]*X[nl-1] */
   ptY->val[nl-1]=ptM->l[nl-1]*ptX->val[nl-2]+ptM->d[nl-1]*ptX->val[nl-1];   
   }
::::::::::::::
idx.c
::::::::::::::
#include "main.h"
 
/* numerotation unique sur la grille Nx x Ny 
Entree : i, j
Sortie : i+j*Nx  // Nx est une variable globale
*/
int idx(int i, int j){
// ATTENTION aucune verification i in [0, Nx-1] et j in [0, Ny-1]
    return i+j*Nx;
    }
::::::::::::::
invM.c
::::::::::::::
#include "main.h"

/* Construction de la decomposition LU à la place de la matrice
Entree : Tridiag *T
Sortie : vide
*/ 
void invM(Tridiag *ptM){
   int nl=ptM->nl;
   for (int k=1; k<nl; k++){
       ptM->l[k] =ptM->l[k]/ptM->d[k-1];
       ptM->d[k] =ptM->d[k]-ptM->u[k-1]*ptM->l[k];
       }
}
::::::::::::::
main.c
::::::::::::::
#include "main.h"
 
/* variables globales */
int Nx; // nombre de noeuds selon x
int Ny; // nombre de noeuds selon y
 
void init_RHS(Vec *f){
   int Nx=f->nx;
   int Ny=f->ny;
   double dx=1./(Nx-1);
   double dy=1./(Ny-1);
   for (int i=0; i<Nx; i++){
       double x=i*dx;
       for (int j=0; j<Ny; j++){
           double y=j*dy;
           int n=idx(i, j);
           f->val[n]=2.0*x*(1.0-x)+2.0*y*(1.0-y);
           }//endfor
       }//endfor
   }
   
void init_uREF(Vec *u){
   int Nx=u->nx;
   int Ny=u->ny;
   double dx=1./(Nx-1);
   double dy=1./(Ny-1);
   for (int i=0; i<Nx; i++){
       double x=i*dx;
       for (int j=0; j<Ny; j++){
           double y=j*dy;
           int n=idx(i, j);
           u->val[n]=x*(1.0-x)*y*(1.0-y);
           }//endfor
       }//endfor
   }
   
double norminf(Vec *u, Vec*f){
    double mx=Nx-1.0;
    double mx_sq=mx*mx;
    double my=Ny-1.0;
    double my_sq=my*my;
    
    /* boucles sur les points interieurs */
    double norm=0.0;
    for (int i=1; i<Nx-1; i++){
        for (int j=1; j<Ny-1; j++){
            int center = idx(i,   j);
            int left   = idx(i-1, j);
            int right  = idx(i+1, j);
            int down   = idx(i, j-1);
            int up     = idx(i, j+1);
            //printf("%d %d %d %d %d\n", center, left, right, down, up);
            double res = 0;
            res += mx_sq*u->val[left]-2.0*mx_sq*u->val[center]+mx_sq*u->val[right];
            res += my_sq*u->val[down]-2.0*my_sq*u->val[center]+my_sq*u->val[up];
            res += f->val[center];
            if (fabs(res)>norm) {
               norm=fabs(res);
               }
            }
        }
    return norm;
}
  
double norminf_debug(Vec *u, Vec*f){
    double mx=Nx-1.0;
    double mx_sq=mx*mx;
    double my=Ny-1.0;
    double my_sq=my*my;
    
    /* boucles sur les points interieurs */
    double norm=0.0;
    for (int i=1; i<Nx-1; i++){
        for (int j=1; j<Ny-1; j++){
            int center = idx(i,   j);
            int left   = idx(i-1, j);
            int right  = idx(i+1, j);
            int down   = idx(i, j-1);
            int up     = idx(i, j+1);
            //printf("%d %d %d %d %d\n", center, left, right, down, up);
            double res = 0;
            res += mx_sq*u->val[left]-2.0*mx_sq*u->val[center]+mx_sq*u->val[right];
            res += my_sq*u->val[down]-2.0*my_sq*u->val[center]+my_sq*u->val[up];
            printf("%d %d lap=%g  f=%g\n", i, j, res, f->val[center]);
            res += f->val[center];
            if (fabs(res)>norm) {
               norm=fabs(res);
               }
            }
        }
    return norm;
}
 
void save(char* filename, Vec *u) {
   double dx=1./(Nx-1);
   double dy=1./(Ny-1);
   FILE *fp=fopen(filename, "w");
   if (!fp) exit(1);
   for (int i=0; i<Nx; i++){
       for (int j=0; j<Ny; j++){
           int n=idx(i,j);
           fprintf(fp, "%lf %lf %g\n", i*dx, j*dy, u->val[n]);
           }
       fprintf(fp, "\n");
       }
   fclose(fp);
}


int main(){
    
    Nx=8;
    Ny=8;
    double tolerance=1e-6;
    double omega = 1024;
    double mx=Nx-1.0;
    double mx_sq=mx*mx;
    double my=Ny-1.0;
    double my_sq=my*my;
    
    Vec *u      = buildVec(0.0, Nx, Ny);        
    Vec *u_star = buildVec(0.0, Nx, Ny);    
    Vec *f      = buildVec(0.0, Nx, Ny);
    init_RHS(f);
    
    int iter=0;
    for(;;){   
    
    // premier pas fractionnaire selon Ox
        for (int j=1; j<Ny-1; j++){
            Tridiag *M     = buildM(omega, Nx);
            Vec *b = buildVec(0.0, Nx, 1);
            
 /*         compute RHSX */ 
            // Construction du second membre pour les noeuds interieurs      
            for (int i=1; i<Nx-1; i++){
                int down   = idx(i, j-1);
                int center = idx(i, j);
                int up     = idx(i, j+1);
                b->val[i] = my_sq*u->val[down]-(2.0*my_sq-omega)*u->val[center]+my_sq*u->val[up];
                b->val[i]+= f->val[center];
                }//endfor i   
                       
            Vec *x = buildVec(0.0, Nx, 1);
            solve(M, b, x);
                         
            for (int i=0; i<Nx; i++){
                int n = idx(i,j);
                u_star->val[n] = x->val[i];
                }//endfor i   
            destroyVec(x);
            destroyVec(b);
            destroyM(M); 
            }//endfor j
 
  
    // second pas fractionnaire selon Oy      
        for (int i=1; i<Nx-1; i++){
            Tridiag *M = buildM(omega, Ny);
            Vec *b = buildVec(0.0, 1, Ny);
            
 /*         compute RHSY */ 
            // Construction du second membre pour les noeuds interieurs                     
            for (int j=1; j<Ny-1; j++){
                int left   = idx(i-1, j);
                int center = idx(i,   j);
                int right  = idx(i+1, j);
                b->val[j] = mx_sq*u_star->val[left]-(2.0*mx_sq-omega)*u_star->val[center]+mx_sq*u_star->val[right];
                b->val[j]+= f->val[center];
                }//endfor j    
                     
            Vec *x = buildVec(0.0, 1, Ny);
            solve(M, b, x);
              
            for (int j=0; j<Ny; j++){
                int n = idx(i,j);
                u->val[n] = x->val[j];
                }//endfor j   
            destroyVec(x);
            destroyVec(b);
            destroyM(M); 
            }//endfor i
        
        iter++;    
        printf("iter %d  residu %g \n", iter, norminf(u, f));
        if (norminf(u, f)<tolerance) break;
            
    } //endfor ever
    
    printf("iter %d  residu %g \n", iter, norminf(u, f));
    save("out", u);  
    
    Vec *uREF= buildVec(0.0, Nx, Ny);
    init_uREF(uREF);
    save("ref", uREF); 
    printf("iter %d  residu %g \n", iter, norminf(uREF, f));
    }     
::::::::::::::
printTridiag.c
::::::::::::::
#include "main.h"

/* Affichage de la matrice Tridiag
Entree : Tridiag *T
Sortie : vide
*/
void printTridiag(Tridiag* T){
    int nl=T->nl;
    for (int k=0; k<nl; k++) {
        printf("row %d : %10.5lf %10.5lf %10.5lf\n", k, T->l[k], T->d[k], T->u[k]);
        }
}
   
::::::::::::::
printVec.c
::::::::::::::
#include "main.h"

/* Affichage du vecteur 
Entree : Vec *V
Sortie : vide
*/
void printVec(Vec* V){
     int nx = V->nx;
     int ny = V->ny;
     for (int i=0; i<nx; i++)
         for (int j=0; j<ny; j++)
             printf("row %d col %d : %10.5lf\n", i, j, V->val[i+j*nx]);
}
::::::::::::::
residu.c
::::::::::::::
#include "main.h"

/* residu = norminf(b-M*x)
Entree : Tridiag *ptM, Vec*ptRHS, Vec *ptX
Sortie : res
*/
double residu(Tridiag *ptM, Vec*ptRHS, Vec *ptX){
    int nl = ptM->nl;
    
    /* Verification des dimensions */
    if (nl != ptX->nx*ptX->ny){
      printf("Error : M and X inconsistent dimensions\n");
      exit(1);
      }      
    if (nl != ptRHS->nx*ptRHS->ny){
      printf("Error : M and RHS inconsistent dimensions\n");
      exit(1);
      } 
   
   Vec *ptY = buildVec(0.0, nl, 1);
   dot(ptM, ptX, ptY);
   
       
   double norminf=0;
   for (int k=0; k<nl; k++){
       double delta=fabs(ptRHS->val[k]-ptY->val[k]);
       if (delta>norminf) norminf=delta;
       }            

   destroyVec(ptY);
   return norminf; 
   }
::::::::::::::
solve.c
::::::::::::::
#include "main.h"

/* Resolution du systeme d'equations lineaires T X = RHS
Entree : Tridiag *ptM, Vec *ptRHS
Sortie : Vec *ptX
*/

void solve(Tridiag *ptM, Vec *ptRHS, Vec *ptX){
   /* Decomposition LU a la place de M */
   invM(ptM);
   int nl = ptM->nl;
   
   /* Allocation du tableau local y */
   double *y=(double*) malloc(nl*sizeof(double));
   if (y == NULL){
      printf("Allocation Error\n");
      exit(1);
      }
      
   /* Verification des dimensions */
   if (nl != ptRHS->nx*ptRHS->ny){
      printf("Error : M and RHS inconsistent dimensions\n");
      exit(1);
      }
    if (nl != ptX->nx*ptX->ny){
      printf("Error : M and X inconsistent dimensions\n");
      exit(1);
      }
           
   /* Methode de la descente */
   y[0]=ptRHS->val[0];
   for (int k=1; k<nl; k++){
       y[k]=ptRHS->val[k]-ptM->l[k]*y[k-1];
       }
                
   /* effacage des composantes de X */
   for (int k=0; k<nl; k++){
       ptX->val[k]=0.0;
       }
       
   /* Methode de la montee */
   ptX->val[nl-1]=y[nl-1]/ptM->d[nl-1];
   for (int k=nl-2; k>=0; k--){
       ptX->val[k] = (y[k]-ptM->u[k]*ptX->val[k+1])/ptM->d[k];
       }
       
   /* liberation memoire du tableau local y */
   free(y);           
}

